from data.loader import dp, bot, Dispatcher
from database import db
from aiogram import types
from data.config import CHANNEL_ID
from states import states_group
from aiogram.dispatcher import FSMContext
from keyboards.keyboards import keyboard_one_can, keyboard_sposob_withdraw, keyboard_sucs_withdraw
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from aiogram.utils.exceptions import MessageCantBeDeleted


async def delete_and_send_new_message(chat_id, message_id, text=None, photo=None, caption=None, reply_markup=None):
    try:
        await bot.delete_message(chat_id, message_id)
    except MessageCantBeDeleted:
        pass

    if photo is not None:
        await bot.send_photo(chat_id, photo, caption=caption, reply_markup=reply_markup)
    else:
        await bot.send_message(chat_id, text, reply_markup=reply_markup)
        

@dp.message_handler(lambda message: not message.text.isdigit(), state=states_group.Form.waiting_for_withdraw)
async def process_invalid_amount(message: types.Message):
    await delete_and_send_new_message(chat_id=message.chat.id, message_id=message.message_id, text="‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n\nüëáüèº –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –µ—â—ë —Ä–∞–∑.", reply_markup=keyboard_one_can)
    return


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['withdraw_profile'])
async def withdraw_handler(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    photo_path = os.path.join('img', 'withdraw.png')
    user_id = callback_query.from_user.id
    balance = await db.get_user_balance(user_id=user_id)
    if balance < 100:
        with open(photo_path, 'rb') as photo_file:
            await delete_and_send_new_message(callback_query.message.chat.id, callback_query.message.message_id, photo=photo_file, caption=f'‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\n‚ùóÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 100 –†—É–±–ª–µ–π', reply_markup=keyboard_one_can) 
    else:
        with open(photo_path, 'rb') as photo_file:
            await delete_and_send_new_message(callback_query.message.chat.id, callback_query.message.message_id, photo=photo_file, caption=f'üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard_sposob_withdraw) 
  
    
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['qiwi_withdraw', 'card_withdraw', 'crypto_withdraw'])
async def withdraw_choose_handler(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await delete_and_send_new_message(callback_query.message.chat.id, callback_query.message.message_id, text="üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")
    await states_group.Form.waiting_for_withdraw.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=states_group.Form.waiting_for_withdraw)
async def process_withdraw_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    amount = int(message.text)
    balance = await db.get_user_balance(user_id=user_id)

    if amount < 100:
        await delete_and_send_new_message(chat_id=message.chat.id, message_id=message.message_id, text="‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100 –†—É–±–ª–µ–π.\n\nüëáüèº –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –µ—â—ë —Ä–∞–∑.", reply_markup=keyboard_one_can)
        return
    elif balance < amount:
        await delete_and_send_new_message(chat_id=message.chat.id, message_id=message.message_id, text=f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\nüëáüèº –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –µ—â—ë —Ä–∞–∑.", reply_markup=keyboard_one_can)
        return
    else:
        await states_group.Form.next()
        await state.update_data(amount=amount)
        await delete_and_send_new_message(chat_id=message.chat.id, message_id=message.message_id, text="üëáüèº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞\n\n‚ùóÔ∏è –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–µ—Ç—å —Ç–æ–∫–µ–Ω–∞.", reply_markup=keyboard_one_can)
        await states_group.Form.waiting_for_requisites.set()


@dp.message_handler(lambda message: not message.text.isdigit(), state=states_group.Form.waiting_for_requisites)
async def process_requisites(message: types.Message, state: FSMContext):
    requisites = message.text
    await state.update_data(requisites=requisites)

    user_data = await state.get_data()
    amount = user_data["amount"]

    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª", callback_data="checked"))
    markup.row(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))

    await delete_and_send_new_message(chat_id=message.chat.id, message_id=message.message_id, text=f"‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª\"\n\nüìé –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}", reply_markup=markup)
    await states_group.Form.waiting_for_confirmation.set()
    
@dp.callback_query_handler(lambda callback_query: callback_query.data in ["checked", "edit", "back"], state=states_group.Form.waiting_for_confirmation)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    if callback_query.data == "edit":
        await delete_and_send_new_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="üëáüèº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ—â—ë —Ä–∞–∑:")
        await states_group.Form.waiting_for_requisites.set()
    elif callback_query.data == "back":
        await delete_and_send_new_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...")
    elif callback_query.data == "checked":
        user_data = await state.get_data()
        amount = user_data["amount"]
        requisites = user_data["requisites"]
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        await db.update_user_balance1(user_id, amount, "subtract")
        await delete_and_send_new_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"‚úÖ –ü–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ\n\n–û–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", reply_markup=keyboard_one_can)

        chat_id = CHANNEL_ID
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚úÖ", callback_data=f"approve_{user_id}_{amount}"), InlineKeyboardButton("‚ùå", callback_data=f"decline_{user_id}_{amount}"))

        await bot.send_message(chat_id=chat_id, text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ\n\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}", reply_markup=markup)

        await state.finish()
        

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("approve_") or callback_query.data.startswith("decline_"))
async def process_admin_response(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    action, user_id, amount = callback_query.data.split("_")
    user_id = int(user_id)
    amount = int(amount)

    if action == "approve":
        await bot.send_message(chat_id=user_id, text=f"üîî <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</b>\n\n<i>üí∏ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ {amount}‚ÇΩ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.</i>\n\n ‚úÖ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ</b>",  parse_mode='html', reply_markup=keyboard_sucs_withdraw)
    elif action == "decline":
        await db.update_user_balance1(user_id, amount, 'add')
        await bot.send_message(chat_id=user_id, text=f"üîî <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</b>\n\n<i>‚ùå –ú—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ {amount}‚ÇΩ.</i>\n\n<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.</b>\n\n‚ùó<b>Ô∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>",  parse_mode='html', reply_markup=keyboard_one_can)
        
        
def register_handlers_withdraw(dp: Dispatcher):
    dp.register_message_handler(process_invalid_amount, lambda message: not message.text.isdigit(), state=states_group.Form.waiting_for_withdraw)
    dp.register_message_handler(process_withdraw_balance, lambda message: message.text.isdigit(), state=states_group.Form.waiting_for_withdraw)
    dp.register_message_handler(process_requisites, lambda message: not message.text.isdigit(), state=states_group.Form.waiting_for_requisites)
    dp.register_callback_query_handler(withdraw_handler, lambda callback_query: callback_query.data in ['withdraw_profile'], state="*")
    dp.register_callback_query_handler(withdraw_choose_handler, lambda callback_query: callback_query.data in ['qiwi_withdraw', 'card_withdraw', 'crypto_withdraw'], state="*")
    dp.register_callback_query_handler(process_confirmation, lambda callback_query: callback_query.data in ["checked", "edit", "back"], state=states_group.Form.waiting_for_confirmation)
    dp.register_callback_query_handler(process_admin_response, lambda callback_query: callback_query.data.startswith("approve_") or callback_query.data.startswith("decline_"), state="*")

